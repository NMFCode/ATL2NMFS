--
-- Written in January 2005 by Peter Rosenthal
--

module XML2DXF;
create OUT : DXF from IN : XML;

helper context XML!Element def: getAttrVal(name : String) : String =
	if (self.childrenXML->select(c | c.oclIsKindOf(XML!Attribute) and c.name = name)->size()=0) then
		''
	else
		self.childrenXML->select(c | c.oclIsKindOf(XML!Attribute) and c.name = name)->first().value
	endif
;


rule DXFRule {
	from
		e : XML!Element (
			e.name = 'DXF'		
		)
	to
		o : DXF!DXF (
			meshes <-  e.childrenXML->select( c | c.name = 'Mesh' )
		)
}

rule PointRule {
	from
		e : XML!Element (
			e.name = 'Point'		
		)
	to
		o : DXF!Point (
			name <- e.getAttrVal('name'),
			x <- e.getAttrVal('x').toReal(),
			y <- e.getAttrVal('y').toReal(),
			z <- e.getAttrVal('z').toReal()
		)
}


rule MeshRule {
	from
		e : XML!Element (
			e.name = 'Mesh'		
		)
	to
		o : DXF!Mesh (
			name <- e.getAttrVal('name'),
			points <- e.childrenXML
		)
}
